--todo: selects, join, employee id, query
--created table within db being used.
--types:
--char (fixed length)
--varchar (variable length)
--text up to 65k chars
--blob (binarys)
--long,medium,tiny text
--int, float (size, digits), double(size, digit),
--Date YYYY-MM-DD
--datetime YYYY-MM-DD HH:MI"SS
--TIME() HH:MI:SS
--image
--query: statement including actins and commands
--database: a collection of data consisting of a physical file
--table -> a collection of related data
--primary key : uniquely identifies an entity in a table
--RDMBS relational database managment system
--super key: set of one or more key that can be used to identify a record of a table
--cnadidate key: set of one of more columns that can identify a record in a table.
--primary key: only one candidate key can be a primary key
--index: create index on last name to speed up a where clause

create database Customer
--create a database called customer

use Customer
--switch to customer database
drop table customer
--primary key identifies row in table
create table Customer
(
    ID int PRIMARY KEY identity(1,1), --start with 1 and increase by 1
    FirstName varchar(50),
    LastName varchar(50),
    Age int
)
create table department(
    DeptID int PRIMARY KEY, --primary key
    name varchar(50), NOT NULL.
    Address varchar(200), NOT NULL)
)

create table student
(
    ID int PRIMARY KEY,
    RollNo varchar(10),
    EnrollNo varchar(50) UNIQUE,
    DeptID int FOREIGN KEY REFERENCES Department(DeptID)
)


insert into Customer
    (FirstName, LastName, Age)
    values('Joey', 'Smith', 12);

select top (1000) firstname, lastname, age from customer.customer


select * from customer
select firstname from customer
select firstname, lastname from customer where
firstname = 'mike' and lastname = 'smith'

select firstname, lastname from customer
where firstname='mike' and lastname like 'smit%'

update customer set Age = 20 where firstname = 'mike';

delete Customer where firstname = 'mike';

alter table customer
add City varchar(50);

update customer set city = 'slc' --optional where firstname='mike'

create table Products(
    product_id int primary key identity(1,1)
    product_name varchar(50)
)

alter table product add price float

insert into product product_name, price values('baseball', 195.55)

create table orders(
    order_id int primary key identity(1,1),
    CustomerID int FOREIGN KEY references Customer,
    Product_id int FOREIGN KEY references PRODUCT,
    order_date DateTime
)

alter table orders add foreign key (customerID) references customer(customer_id)
select * from product;
select * from customer;

insert into orders (orderdate, customerid, productid)
values ( GetDate(), 1, 2 )

--inner join means everything has to match up
--this star does all cols from both tables
select * from orders as o
inner join products as p on o.order_id = p.product_id

select o.date, p.product_name, p.price, c.* from orders as o
inner join products as p on o.product_id = p.product_id
inner join customer as c on o.customer_id = c.customer_id


select customer.lastname, p.product_name sum(p.price) as [Total Spent]
from orders
inner join product on order.product_id = product.product_id
inner join customer on order.customer_id = customer.customer_id
groupby customer.lastname, product.product_name

--groupby has to match the select since its a sum

select c.city, sum(p.price), avg(p.price) total, average
from orders
inner join product on order.product_id = product.product_id
inner join customer on order.customer_id = customer.customer_id
groupby c.city
order by c.city DESC

select w.emp_name, w.job_name, fro employees w, employees m, where
w.manager_id = m.emp_id AND w.salary > m.salary

select e.id, e.name, d.dep_name from employees e, dep d where e.dep_id = d.id;